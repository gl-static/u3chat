!function(){function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t){return n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(e,t)}function r(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var i=c(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return o(this,n)}}function o(t,n){if(n&&("object"===e(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return i(t)}function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},c(e)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t,n,r,o,i,c){try{var a=e[i](c),u=a.value}catch(s){return void n(s)}a.done?t(u):Promise.resolve(u).then(r,o)}System.register(["./vendor-legacy.75f81643.js","./index-legacy.56242811.js","./index-legacy.ae4ffeac.js"],(function(e){"use strict";var o,c,a,l,p,d,v,y,m,h,w,b,g,O,k,L,j,E,S,P,U,T,B,R,z;return{setters:[function(e){o=e.R,c=e.x,a=e.w,l=e.F,p=e.G},function(e){d=e.a_,v=e.cH,y=e.gB,m=e.ap,h=e.gC,w=e.L,b=e.gy,g=e.S,O=e.aV,k=e.E,L=e.y,j=e.as,E=e.a3,S=e.gD},function(e){P=e.i,U=e.e,T=e.a,B=e.B,R=e.c,z=e.W}],execute:function(){function I(e){return function(){var t,n=(t=regeneratorRuntime.mark((function t(n,r){var o,i,c,a,s;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=d(r()),i=v(r(),o.id),c=i.automaticTimezone!==e,i.useAutomaticTimezone&&c&&(a={useAutomaticTimezone:"true",automaticTimezone:e,manualTimezone:i.manualTimezone},s=u(u({},o),{},{timezone:a}),y(s)(n,r)),t.abrupt("return",{});case 5:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function c(e){f(i,r,o,c,a,"next",e)}function a(e){f(i,r,o,c,a,"throw",e)}c(void 0)}))});return function(e,t){return n.apply(this,arguments)}}()}var x=m.dispatch,D=m.getState,_=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}(p,e);var o,u,f,l=r(p);function p(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),s(i(t=l.call(this,e)),"onDesktopMessageListener",(function(e){var n=e.origin,r=e.data,o=(r=void 0===r?{}:r).type,i=r.message,c=void 0===i?{}:i;if(t.props.currentUser&&n===window.location.origin)switch(o){case"register-desktop":var u=c.version;window.desktop||(window.desktop={}),window.desktop.version=a.valid(a.coerce(u));break;case"user-activity-update":var s=c.userIsActive,f=c.manual;!0!==s&&!1!==s||z.userUpdateActiveStatus(s,f);break;case"notification-clicked":var l=c.channel,p=c.teamId;window.focus(),t.props.actions.getChannelURLAction(l,p)}})),s(i(t),"handleBackSpace",(function(e){8!==e.which||["input","textarea"].includes(e.target.tagName.toLowerCase())||e.preventDefault()})),s(i(t),"handleBeforeUnload",(function(){window.removeEventListener("beforeunload",t.handleBeforeUnload),document.cookie.indexOf("".concat(g.COOKIE.SESSION_USER,"="))>-1&&O("",t.props.currentChannelId||"")(x,D),R()}));var n=document.getElementById("u3-chatting");return n&&(n.className+=" channel-view"),t}return o=p,(u=[{key:"isValidState",value:function(){return null!=this.props.currentUser}},{key:"componentDidMount",value:function(){var e=this.props,t=e.currentUser,n=e.enableTimezone,r=e.actions,o=e.location,i=e.history,c=e.clientId;if(P(),n&&r.autoUpdateTimezone(h()),window.addEventListener("beforeunload",this.handleBeforeUnload),window.addEventListener("focus",this.onFocusListener),window.addEventListener("blur",this.onBlurListener),document.hasFocus()||U(!1),window.addEventListener("message",this.onDesktopMessageListener),window.postMessage({type:"webapp-ready"},window.location.origin),!t)return w.removeUserId(c),w.removeToken(c),void T("/error?type=no-auth&redirect_to="+encodeURIComponent(o.pathname),!0,!1,i);window.addEventListener("keydown",this.handleBackSpace),this.isValidState()&&B.signalLogin()}},{key:"componentWillUnmount",value:function(){R(),window.removeEventListener("keydown",this.handleBackSpace),window.removeEventListener("focus",this.onFocusListener),window.removeEventListener("blur",this.onBlurListener),window.removeEventListener("message",this.onDesktopMessageListener)}},{key:"render",value:function(){return this.isValidState()?this.props.children:c(b,{message:"Xác thực tài khoản"})}},{key:"onFocusListener",value:function(){U(!0)}},{key:"onBlurListener",value:function(){U(!1)}}])&&t(o.prototype,u),f&&t(o,f),p}(o.PureComponent);var C=function(e,t){return function(n,r){return E.push(S(r(),e,t))}};e("default",l((function(e){var t=k(e),n=L();return{currentUser:d(e),currentChannelId:j(e),enableTimezone:"true"===t.ExperimentalTimezone,clientId:n.clientId}}),(function(e){return{actions:p({autoUpdateTimezone:I,getChannelURLAction:C},e)}}))(_))}}}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
