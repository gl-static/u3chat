var e=Object.defineProperty,t=Object.defineProperties,n=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,i=(t,n,o)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o,r=(e,t,n)=>(i(e,"symbol"!=typeof t?t+"":t,n),n);import{R as c,x as d,w as u,I as p,J as l}from"./vendor.b4a3f96f.js";import{aQ as m,bX as h,bY as w,ad as f,bZ as v,bS as b,N as g,aK as L,y,ag as k,$ as E,b_ as U}from"./index.fe6624b8.js";import{i as S,e as O,a as z,B,c as T,W as I}from"./index.552beff8.js";function j(e){return async(r,c)=>{const d=m(c()),u=h(c(),d.id),p=u.automaticTimezone!==e;if(u.useAutomaticTimezone&&p){const p={useAutomaticTimezone:"true",automaticTimezone:e,manualTimezone:u.manualTimezone},m=(l=((e,t)=>{for(var n in t||(t={}))s.call(t,n)&&i(e,n,t[n]);if(o)for(var n of o(t))a.call(t,n)&&i(e,n,t[n]);return e})({},d),t(l,n({timezone:p})));w(m)(r,c)}var l;return{}}}const x=f.dispatch,C=f.getState;class A extends c.PureComponent{constructor(e){super(e),r(this,"onDesktopMessageListener",(e=>{const{origin:t,data:{type:n,message:o={}}={}}=e;if(this.props.currentUser&&t===window.location.origin)switch(n){case"register-desktop":{const{version:e}=o;window.desktop||(window.desktop={}),window.desktop.version=u.valid(u.coerce(e));break}case"user-activity-update":{const{userIsActive:e,manual:t}=o;!0!==e&&!1!==e||I.userUpdateActiveStatus(e,t);break}case"notification-clicked":{const{channel:e,teamId:t}=o;window.focus(),this.props.actions.getChannelURLAction(e,t);break}}})),r(this,"handleBackSpace",(e=>{8!==e.which||["input","textarea"].includes(e.target.tagName.toLowerCase())||e.preventDefault()})),r(this,"handleBeforeUnload",(()=>{window.removeEventListener("beforeunload",this.handleBeforeUnload),document.cookie.indexOf(`${g.COOKIE.SESSION_USER}=`)>-1&&L("",this.props.currentChannelId||"")(x,C),T()}));const t=document.getElementById("u3-chatting");t&&(t.className+=" channel-view")}isValidState(){return null!=this.props.currentUser}componentDidMount(){const{currentUser:e,enableTimezone:t,actions:n,location:o}=this.props;S(),t&&n.autoUpdateTimezone(v()),window.addEventListener("beforeunload",this.handleBeforeUnload),window.addEventListener("focus",this.onFocusListener),window.addEventListener("blur",this.onBlurListener),document.hasFocus()||O(!1),window.addEventListener("message",this.onDesktopMessageListener),window.postMessage({type:"webapp-ready"},window.location.origin),e||z("/error?type=no-auth&redirect_to="+encodeURIComponent(o.pathname),!0,!1),window.addEventListener("keydown",this.handleBackSpace),this.isValidState()&&B.signalLogin()}componentWillUnmount(){T(),window.removeEventListener("keydown",this.handleBackSpace),window.removeEventListener("focus",this.onFocusListener),window.removeEventListener("blur",this.onBlurListener),window.removeEventListener("message",this.onDesktopMessageListener)}render(){return this.isValidState()?this.props.children:d(b,{message:"Xác thực tài khoản"})}onFocusListener(){O(!0)}onBlurListener(){O(!1)}}var D=A;const P=(e,t)=>(n,o)=>E.push(U(o(),e,t));var M=p((function(e){const t=y(e);return{currentUser:m(e),currentChannelId:k(e),enableTimezone:"true"===t.ExperimentalTimezone}}),(function(e){return{actions:l({autoUpdateTimezone:j,getChannelURLAction:P},e)}}))(D);export{M as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
