var e=Object.defineProperty,r=Object.defineProperties,t=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable,i=(r,t,s)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s,o=(e,r)=>{for(var t in r||(r={}))a.call(r,t)&&i(e,t,r[t]);if(s)for(var t of s(r))n.call(r,t)&&i(e,t,r[t]);return e},l=(e,r,t)=>(i(e,"symbol"!=typeof r?r+"":r,t),t);import{U as u,v as f,R as d,x as c,V as b}from"./vendor.b4a3f96f.js";const p={locale:u.string,timeZone:u.string,formats:u.object,messages:u.object,textComponent:u.any,defaultLocale:u.string,defaultFormats:u.object,wrapRichTextChunksInFragment:u.bool,onError:u.func},m={formatDate:u.func.isRequired,formatTime:u.func.isRequired,formatRelativeTime:u.func.isRequired,formatNumber:u.func.isRequired,formatPlural:u.func.isRequired,formatMessage:u.func.isRequired},g=u.shape((h=o(o({},p),m),y={formatters:u.object},r(h,t(y))));var h,y;class R extends f.Renderer{constructor(e){super(),l(this,"disableLinks"),this.disableLinks=e}link(e,r,t){return this.disableLinks?t:"!"===e[0]?`<a href="${e.substring(1,e.length)}" rel="noopener noreferrer" target="_blank">${t}</a>`:`<a href="${e}">${t}</a>`}paragraph(e){return e}}class j extends d.PureComponent{static get propTypes(){return{intl:g.isRequired,id:u.string.isRequired,defaultMessage:u.string.isRequired,values:u.object,disableLinks:u.bool}}render(){const{intl:e,id:r,defaultMessage:t,values:s,disableLinks:a}=this.props,n=e.formatMessage({id:r,defaultMessage:t},s),i=f(n,{breaks:!0,sanitize:!0,renderer:new R(a)});return c("span",{dangerouslySetInnerHTML:{__html:i}})}}l(j,"defaultProps",{disableLinks:!1});var v=b(j);export{v as F,g as i};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlLjg0YjY4ZWVmLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMveC91dGlscy9yZWFjdF9pbnRsLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCBNYXR0ZXJtb3N0LCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTZWUgTElDRU5TRS50eHQgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8vIFByb3AgdHlwZXMgY29waWVkIGZyb20gdGhlIG9sZCB2ZXJzaW9uIG9mXG5cbmV4cG9ydCBjb25zdCBpbnRsQ29uZmlnUHJvcFR5cGVzID0ge1xuICAgIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aW1lWm9uZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmb3JtYXRzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lc3NhZ2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRleHRDb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgICBkZWZhdWx0TG9jYWxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlZmF1bHRGb3JtYXRzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHdyYXBSaWNoVGV4dENodW5rc0luRnJhZ21lbnQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgY29uc3QgaW50bEZvcm1hdFByb3BUeXBlcyA9IHtcbiAgICBmb3JtYXREYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZvcm1hdFRpbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZm9ybWF0UmVsYXRpdmVUaW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZvcm1hdE51bWJlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmb3JtYXRQbHVyYWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZm9ybWF0TWVzc2FnZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBjb25zdCBpbnRsU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIC4uLmludGxDb25maWdQcm9wVHlwZXMsXG4gICAgLi4uaW50bEZvcm1hdFByb3BUeXBlcyxcbiAgICBmb3JtYXR0ZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxufSk7XG4iLCIvKipcbiAqIEZpbGU6IEZvcm1hdGVkTWFya293bk1lc3NhZ2UudHN4XG4gKiBQcm9qZWN0OiBjaGF0dGluZy1taW5pbWFsXG4gKiBGaWxlIENyZWF0ZWQ6IDA1IE9jdCAyMDIxIDExOjA1OjQzXG4gKiBBdXRob3I6IHVuZDNmaW5lZCAobWVAdW5kM2ZpbmVkLmNvbSlcbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAwNSBPY3QgMjAyMSAxMTowNzoxNlxuICogTW9kaWZpZWQgQnk6IHVuZDNmaW5lZCAobWVAdW5kM2ZpbmVkLmNvbSlcbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgdW5kM2ZpbmVkLmNvbVxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtpbmplY3RJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWFya2VkIGZyb20gJ21hcmtlZCc7XG5cbmltcG9ydCB7aW50bFNoYXBlfSBmcm9tICckdXRpbHMvcmVhY3RfaW50bCc7XG5cbmNvbnN0IFRBUkdFVF9CTEFOS19VUkxfUFJFRklYID0gJyEnO1xuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUmVuZGVyZXIgZXh0ZW5kcyBtYXJrZWQuUmVuZGVyZXIge1xuICBwcml2YXRlIGRpc2FibGVMaW5rczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihkaXNhYmxlTGlua3M6IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGlzYWJsZUxpbmtzID0gZGlzYWJsZUxpbmtzO1xuICB9XG5cbiAgbGluayhocmVmOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmRpc2FibGVMaW5rcykge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGlmIChocmVmWzBdID09PSBUQVJHRVRfQkxBTktfVVJMX1BSRUZJWCkge1xuICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtocmVmLnN1YnN0cmluZygxLCBocmVmLmxlbmd0aCl9XCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiPiR7dGV4dH08L2E+YDtcbiAgICB9XG4gICAgcmV0dXJuIGA8YSBocmVmPVwiJHtocmVmfVwiPiR7dGV4dH08L2E+YDtcbiAgfVxuXG4gIHBhcmFncmFwaCh0ZXh0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxufVxuXG4vKlxuICogVHJhbnNsYXRpb25zIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIEFQSSBhcyByZWFjdC1pbnRsJ3MgPEZvcm1hdHRlZE1lc3NhZ2U+IGNvbXBvbmVudCBleGNlcHQgdGhlIG1lc3NhZ2Ugc3RyaW5nXG4gKiBhY2NlcHRzIG1hcmtkb3duLiBJdCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIG5vbi1ibG9jay1sZXZlbCBtYXJrZG93bjpcbiAqIC0gKml0YWxpYypcbiAqIC0gKipib2xkKipcbiAqIC0gYGlubGluZSBjb2RlYFxuICogLSB+fnN0cmlrZXRocm91Z2h+flxuICogLSBbbGlua10oaHR0cDovL2V4YW1wbGUuY29tLylcbiAqIC0gW2xpbmsgaW4gbmV3IHRhYl0oIWh0dHA6Ly9leGFtcGxlLmNvbS8pXG4gKiAtIGxpbmVcXG5icmVha3NcbiAqXG4gKiBOb3RlOiBMaW5lIGJyZWFrcyAoXFxuKSBpbiBhIGRlZmF1bHRNZXNzYWdlIHBhcmFtZXRlciBzdHJpbmcgbXVzdCBiZSBzdXJyb3VuZGVkIGJ5IGN1cmx5IGJyYWNrZXRzIHt9IGluIEpTWC4gRXhhbXBsZTpcbiAqIDxGb3JtYXR0ZWRNYXJrZG93bk1lc3NhZ2UgaWQ9J215LmV4YW1wbGUnIGRlZmF1bHRNZXNzYWdlPXsnZmlyc3QgbGluZVxcbnNlY29uZCBsaW5lJ30gLz5cbiAqL1xuY2xhc3MgRm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxhbnk+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlTGlua3M6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXQgcHJvcFR5cGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnRsOiBpbnRsU2hhcGUuaXNSZXF1aXJlZCxcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkZWZhdWx0TWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgdmFsdWVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgZGlzYWJsZUxpbmtzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtpbnRsLCBpZCwgZGVmYXVsdE1lc3NhZ2UsIHZhbHVlcywgZGlzYWJsZUxpbmtzfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBvcmlnTXNnID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZCwgZGVmYXVsdE1lc3NhZ2V9LCB2YWx1ZXMpO1xuXG4gICAgY29uc3QgbWFya2VkVXBNZXNzYWdlID0gbWFya2VkKG9yaWdNc2csIHtcbiAgICAgIGJyZWFrczogdHJ1ZSxcbiAgICAgIHNhbml0aXplOiB0cnVlLFxuICAgICAgcmVuZGVyZXI6IG5ldyBDdXN0b21SZW5kZXJlcihkaXNhYmxlTGlua3MpLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBtYXJrZWRVcE1lc3NhZ2V9fSAvPjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbmplY3RJbnRsKEZvcm1hdHRlZE1hcmtkb3duTWVzc2FnZSk7XG4iXSwibmFtZXMiOlsiaW50bENvbmZpZ1Byb3BUeXBlcyIsImxvY2FsZSIsIlByb3BUeXBlcyIsInN0cmluZyIsInRpbWVab25lIiwiZm9ybWF0cyIsIm9iamVjdCIsIm1lc3NhZ2VzIiwidGV4dENvbXBvbmVudCIsImFueSIsImRlZmF1bHRMb2NhbGUiLCJkZWZhdWx0Rm9ybWF0cyIsIndyYXBSaWNoVGV4dENodW5rc0luRnJhZ21lbnQiLCJib29sIiwib25FcnJvciIsImZ1bmMiLCJpbnRsRm9ybWF0UHJvcFR5cGVzIiwiZm9ybWF0RGF0ZSIsImlzUmVxdWlyZWQiLCJmb3JtYXRUaW1lIiwiZm9ybWF0UmVsYXRpdmVUaW1lIiwiZm9ybWF0TnVtYmVyIiwiZm9ybWF0UGx1cmFsIiwiZm9ybWF0TWVzc2FnZSIsImludGxTaGFwZSIsInNoYXBlIiwiZm9ybWF0dGVycyIsIm1hcmtlZCIsIlJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJkaXNhYmxlTGlua3MiLCJsaW5rIiwiaHJlZiIsInRpdGxlIiwidGV4dCIsInRoaXMiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJwYXJhZ3JhcGgiLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJpbnRsIiwiaWQiLCJkZWZhdWx0TWVzc2FnZSIsInZhbHVlcyIsInJlbmRlciIsInByb3BzIiwib3JpZ01zZyIsIm1hcmtlZFVwTWVzc2FnZSIsImJyZWFrcyIsInNhbml0aXplIiwicmVuZGVyZXIiLCJDdXN0b21SZW5kZXJlciIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiZGVmYXVsdFByb3BzIiwiRm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlIiwiaW5qZWN0SW50bCJdLCJtYXBwaW5ncyI6InFnQkFPYUEsRUFBc0IsQ0FDL0JDLE9BQVFDLEVBQVVDLE9BQ2xCQyxTQUFVRixFQUFVQyxPQUNwQkUsUUFBU0gsRUFBVUksT0FDbkJDLFNBQVVMLEVBQVVJLE9BQ3BCRSxjQUFlTixFQUFVTyxJQUV6QkMsY0FBZVIsRUFBVUMsT0FDekJRLGVBQWdCVCxFQUFVSSxPQUMxQk0sNkJBQThCVixFQUFVVyxLQUV4Q0MsUUFBU1osRUFBVWEsTUFHVkMsRUFBc0IsQ0FDL0JDLFdBQVlmLEVBQVVhLEtBQUtHLFdBQzNCQyxXQUFZakIsRUFBVWEsS0FBS0csV0FDM0JFLG1CQUFvQmxCLEVBQVVhLEtBQUtHLFdBQ25DRyxhQUFjbkIsRUFBVWEsS0FBS0csV0FDN0JJLGFBQWNwQixFQUFVYSxLQUFLRyxXQUM3QkssY0FBZXJCLEVBQVVhLEtBQUtHLFlBR3JCTSxFQUFZdEIsRUFBVXVCLGdCQUM1QnpCLEdBQ0FnQixLQUZrQyxDQUdyQ1UsV0FBWXhCLEVBQVVJLDRDQ2JVcUIsRUFBT0MsU0FHekNDLFlBQVlDLHVDQUVMQSxhQUFlQSxFQUd0QkMsS0FBS0MsRUFBY0MsRUFBZUMsVUFDNUJDLEtBQUtMLGFBQ0FJLEVBWm1CLE1BY3hCRixFQUFLLEdBQ0MsWUFBV0EsRUFBS0ksVUFBVSxFQUFHSixFQUFLSyxzREFBc0RILFFBRTFGLFlBQVdGLE1BQVNFLFFBRzlCSSxVQUFVSixVQUNEQSxHQWtCWCxnQkFBdUNLLEVBQU1DLDJDQU1sQyxDQUNMQyxLQUFNakIsRUFBVU4sV0FDaEJ3QixHQUFJeEMsRUFBVUMsT0FBT2UsV0FDckJ5QixlQUFnQnpDLEVBQVVDLE9BQU9lLFdBQ2pDMEIsT0FBUTFDLEVBQVVJLE9BQ2xCd0IsYUFBYzVCLEVBQVVXLE1BSTVCZ0MsZUFDUUosS0FBQ0EsS0FBTUMsaUJBQUlDLFNBQWdCQyxlQUFRZCxHQUFnQkssS0FBS1csTUFFeERDLEVBQVVOLEVBQUtsQixjQUFjLENBQUNtQixHQUFBQSxFQUFJQyxlQUFBQSxHQUFpQkMsR0FFbkRJLEVBQWtCckIsRUFBT29CLEVBQVMsQ0FDdENFLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxTQUFVLElBQUlDLEVBQWV0QixzQkFHbEJ1Qix3QkFBeUIsQ0FBQ0MsT0FBUU4sTUF6QjFDTyxFQURUQyxFQUNTRCxlQUFlLENBQ3BCekIsY0FBYyxJQTRCbEIsTUFBZTJCLEVBQVdEIn0=
