!function(){function e(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}System.register(["./vendor-legacy.59c63cb5.js"],(function(r){"use strict";var t,s,n,i,a;return{setters:[function(e){t=e.U,s=e.v,n=e.R,i=e.x,a=e.V}],execute:function(){const o={locale:t.string,timeZone:t.string,formats:t.object,messages:t.object,textComponent:t.any,defaultLocale:t.string,defaultFormats:t.object,wrapRichTextChunksInFragment:t.bool,onError:t.func},u={formatDate:t.func.isRequired,formatTime:t.func.isRequired,formatRelativeTime:t.func.isRequired,formatNumber:t.func.isRequired,formatPlural:t.func.isRequired,formatMessage:t.func.isRequired},l=r("i",t.shape({...o,...u,formatters:t.object}));class c extends s.Renderer{constructor(r){super(),e(this,"disableLinks",void 0),this.disableLinks=r}link(e,r,t){return this.disableLinks?t:"!"===e[0]?`<a href="${e.substring(1,e.length)}" rel="noopener noreferrer" target="_blank">${t}</a>`:`<a href="${e}">${t}</a>`}paragraph(e){return e}}class d extends n.PureComponent{static get propTypes(){return{intl:l.isRequired,id:t.string.isRequired,defaultMessage:t.string.isRequired,values:t.object,disableLinks:t.bool}}render(){const{intl:e,id:r,defaultMessage:t,values:n,disableLinks:a}=this.props,o=e.formatMessage({id:r,defaultMessage:t},n),u=s(o,{breaks:!0,sanitize:!0,renderer:new c(a)});return i("span",{dangerouslySetInnerHTML:{__html:u}})}}e(d,"defaultProps",{disableLinks:!1});r("F",a(d))}}}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlLWxlZ2FjeS5mNGIxMWNkMS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3gvdXRpbHMvcmVhY3RfaW50bC50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm1hdHRlZE1hcmtkb3duTWVzc2FnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgTWF0dGVybW9zdCwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU2VlIExJQ0VOU0UudHh0IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vLyBQcm9wIHR5cGVzIGNvcGllZCBmcm9tIHRoZSBvbGQgdmVyc2lvbiBvZlxuXG5leHBvcnQgY29uc3QgaW50bENvbmZpZ1Byb3BUeXBlcyA9IHtcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGltZVpvbmU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZm9ybWF0czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZXNzYWdlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0ZXh0Q29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gICAgZGVmYXVsdExvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0Rm9ybWF0czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB3cmFwUmljaFRleHRDaHVua3NJbkZyYWdtZW50OiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGNvbnN0IGludGxGb3JtYXRQcm9wVHlwZXMgPSB7XG4gICAgZm9ybWF0RGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmb3JtYXRUaW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZvcm1hdFJlbGF0aXZlVGltZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmb3JtYXROdW1iZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZm9ybWF0UGx1cmFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZvcm1hdE1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgaW50bFNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAuLi5pbnRsQ29uZmlnUHJvcFR5cGVzLFxuICAgIC4uLmludGxGb3JtYXRQcm9wVHlwZXMsXG4gICAgZm9ybWF0dGVyczogUHJvcFR5cGVzLm9iamVjdCxcbn0pO1xuIiwiLyoqXG4gKiBGaWxlOiBGb3JtYXRlZE1hcmtvd25NZXNzYWdlLnRzeFxuICogUHJvamVjdDogY2hhdHRpbmctbWluaW1hbFxuICogRmlsZSBDcmVhdGVkOiAwNSBPY3QgMjAyMSAxMTowNTo0M1xuICogQXV0aG9yOiB1bmQzZmluZWQgKG1lQHVuZDNmaW5lZC5jb20pXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMDUgT2N0IDIwMjEgMTE6MDc6MTZcbiAqIE1vZGlmaWVkIEJ5OiB1bmQzZmluZWQgKG1lQHVuZDNmaW5lZC5jb20pXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDIxIHVuZDNmaW5lZC5jb21cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7aW5qZWN0SW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1hcmtlZCBmcm9tICdtYXJrZWQnO1xuXG5pbXBvcnQge2ludGxTaGFwZX0gZnJvbSAnJHV0aWxzL3JlYWN0X2ludGwnO1xuXG5jb25zdCBUQVJHRVRfQkxBTktfVVJMX1BSRUZJWCA9ICchJztcblxuZXhwb3J0IGNsYXNzIEN1c3RvbVJlbmRlcmVyIGV4dGVuZHMgbWFya2VkLlJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBkaXNhYmxlTGlua3M6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoZGlzYWJsZUxpbmtzOiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRpc2FibGVMaW5rcyA9IGRpc2FibGVMaW5rcztcbiAgfVxuXG4gIGxpbmsoaHJlZjogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlTGlua3MpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBpZiAoaHJlZlswXSA9PT0gVEFSR0VUX0JMQU5LX1VSTF9QUkVGSVgpIHtcbiAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHJlZi5zdWJzdHJpbmcoMSwgaHJlZi5sZW5ndGgpfVwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke3RleHR9PC9hPmA7XG4gICAgfVxuICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHJlZn1cIj4ke3RleHR9PC9hPmA7XG4gIH1cblxuICBwYXJhZ3JhcGgodGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cblxuLypcbiAqIFRyYW5zbGF0aW9ucyBjb21wb25lbnQgd2l0aCB0aGUgc2FtZSBBUEkgYXMgcmVhY3QtaW50bCdzIDxGb3JtYXR0ZWRNZXNzYWdlPiBjb21wb25lbnQgZXhjZXB0IHRoZSBtZXNzYWdlIHN0cmluZ1xuICogYWNjZXB0cyBtYXJrZG93bi4gSXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBub24tYmxvY2stbGV2ZWwgbWFya2Rvd246XG4gKiAtICppdGFsaWMqXG4gKiAtICoqYm9sZCoqXG4gKiAtIGBpbmxpbmUgY29kZWBcbiAqIC0gfn5zdHJpa2V0aHJvdWdofn5cbiAqIC0gW2xpbmtdKGh0dHA6Ly9leGFtcGxlLmNvbS8pXG4gKiAtIFtsaW5rIGluIG5ldyB0YWJdKCFodHRwOi8vZXhhbXBsZS5jb20vKVxuICogLSBsaW5lXFxuYnJlYWtzXG4gKlxuICogTm90ZTogTGluZSBicmVha3MgKFxcbikgaW4gYSBkZWZhdWx0TWVzc2FnZSBwYXJhbWV0ZXIgc3RyaW5nIG11c3QgYmUgc3Vycm91bmRlZCBieSBjdXJseSBicmFja2V0cyB7fSBpbiBKU1guIEV4YW1wbGU6XG4gKiA8Rm9ybWF0dGVkTWFya2Rvd25NZXNzYWdlIGlkPSdteS5leGFtcGxlJyBkZWZhdWx0TWVzc2FnZT17J2ZpcnN0IGxpbmVcXG5zZWNvbmQgbGluZSd9IC8+XG4gKi9cbmNsYXNzIEZvcm1hdHRlZE1hcmtkb3duTWVzc2FnZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8YW55PiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZUxpbmtzOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgZ2V0IHByb3BUeXBlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW50bDogaW50bFNoYXBlLmlzUmVxdWlyZWQsXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZGVmYXVsdE1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHZhbHVlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIGRpc2FibGVMaW5rczogUHJvcFR5cGVzLmJvb2wsXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aW50bCwgaWQsIGRlZmF1bHRNZXNzYWdlLCB2YWx1ZXMsIGRpc2FibGVMaW5rc30gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgb3JpZ01zZyA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQsIGRlZmF1bHRNZXNzYWdlfSwgdmFsdWVzKTtcblxuICAgIGNvbnN0IG1hcmtlZFVwTWVzc2FnZSA9IG1hcmtlZChvcmlnTXNnLCB7XG4gICAgICBicmVha3M6IHRydWUsXG4gICAgICBzYW5pdGl6ZTogdHJ1ZSxcbiAgICAgIHJlbmRlcmVyOiBuZXcgQ3VzdG9tUmVuZGVyZXIoZGlzYWJsZUxpbmtzKSxcbiAgICB9KTtcblxuICAgIHJldHVybiA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogbWFya2VkVXBNZXNzYWdlfX0gLz47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0SW50bChGb3JtYXR0ZWRNYXJrZG93bk1lc3NhZ2UpO1xuIl0sIm5hbWVzIjpbImludGxDb25maWdQcm9wVHlwZXMiLCJsb2NhbGUiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJ0aW1lWm9uZSIsImZvcm1hdHMiLCJvYmplY3QiLCJtZXNzYWdlcyIsInRleHRDb21wb25lbnQiLCJhbnkiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdEZvcm1hdHMiLCJ3cmFwUmljaFRleHRDaHVua3NJbkZyYWdtZW50IiwiYm9vbCIsIm9uRXJyb3IiLCJmdW5jIiwiaW50bEZvcm1hdFByb3BUeXBlcyIsImZvcm1hdERhdGUiLCJpc1JlcXVpcmVkIiwiZm9ybWF0VGltZSIsImZvcm1hdFJlbGF0aXZlVGltZSIsImZvcm1hdE51bWJlciIsImZvcm1hdFBsdXJhbCIsImZvcm1hdE1lc3NhZ2UiLCJpbnRsU2hhcGUiLCJzaGFwZSIsImZvcm1hdHRlcnMiLCJtYXJrZWQiLCJSZW5kZXJlciIsImNvbnN0cnVjdG9yIiwiZGlzYWJsZUxpbmtzIiwiX2RlZmluZVByb3BlcnR5IiwibGluayIsImhyZWYiLCJ0aXRsZSIsInRleHQiLCJ0aGlzIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwicGFyYWdyYXBoIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiaW50bCIsImlkIiwiZGVmYXVsdE1lc3NhZ2UiLCJ2YWx1ZXMiLCJyZW5kZXIiLCJwcm9wcyIsIm9yaWdNc2ciLCJtYXJrZWRVcE1lc3NhZ2UiLCJicmVha3MiLCJzYW5pdGl6ZSIsInJlbmRlcmVyIiwiQ3VzdG9tUmVuZGVyZXIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImluamVjdEludGwiLCJGb3JtYXR0ZWRNYXJrZG93bk1lc3NhZ2UiXSwibWFwcGluZ3MiOiJpVEFPYUEsRUFBc0IsQ0FDL0JDLE9BQVFDLEVBQVVDLE9BQ2xCQyxTQUFVRixFQUFVQyxPQUNwQkUsUUFBU0gsRUFBVUksT0FDbkJDLFNBQVVMLEVBQVVJLE9BQ3BCRSxjQUFlTixFQUFVTyxJQUV6QkMsY0FBZVIsRUFBVUMsT0FDekJRLGVBQWdCVCxFQUFVSSxPQUMxQk0sNkJBQThCVixFQUFVVyxLQUV4Q0MsUUFBU1osRUFBVWEsTUFHVkMsRUFBc0IsQ0FDL0JDLFdBQVlmLEVBQVVhLEtBQUtHLFdBQzNCQyxXQUFZakIsRUFBVWEsS0FBS0csV0FDM0JFLG1CQUFvQmxCLEVBQVVhLEtBQUtHLFdBQ25DRyxhQUFjbkIsRUFBVWEsS0FBS0csV0FDN0JJLGFBQWNwQixFQUFVYSxLQUFLRyxXQUM3QkssY0FBZXJCLEVBQVVhLEtBQUtHLFlBR3JCTSxRQUFZdEIsRUFBVXVCLE1BQU0sSUFDbEN6QixLQUNBZ0IsRUFDSFUsV0FBWXhCLEVBQVVJLDBCQ2JVcUIsRUFBT0MsU0FHekNDLFlBQVlDLFdBQXVCQyxtQ0FFNUJELGFBQWVBLEVBR3RCRSxLQUFLQyxFQUFjQyxFQUFlQyxVQUM1QkMsS0FBS04sYUFDQUssRUFabUIsTUFjeEJGLEVBQUssZUFDWUEsRUFBS0ksVUFBVSxFQUFHSixFQUFLSyxzREFBc0RILG9CQUUvRUYsTUFBU0UsUUFHOUJJLFVBQVVKLFVBQ0RBLEdBa0JYLGdCQUF1Q0ssRUFBTUMsMkNBTWxDLENBQ0xDLEtBQU1sQixFQUFVTixXQUNoQnlCLEdBQUl6QyxFQUFVQyxPQUFPZSxXQUNyQjBCLGVBQWdCMUMsRUFBVUMsT0FBT2UsV0FDakMyQixPQUFRM0MsRUFBVUksT0FDbEJ3QixhQUFjNUIsRUFBVVcsTUFJNUJpQyxlQUNRSixLQUFDQSxFQUFEQyxHQUFPQSxFQUFQQyxlQUFXQSxFQUFYQyxPQUEyQkEsRUFBM0JmLGFBQW1DQSxHQUFnQk0sS0FBS1csTUFFeERDLEVBQVVOLEVBQUtuQixjQUFjLENBQUNvQixHQUFBQSxFQUFJQyxlQUFBQSxHQUFpQkMsR0FFbkRJLEVBQWtCdEIsRUFBT3FCLEVBQVMsQ0FDdENFLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxTQUFVLElBQUlDLEVBQWV2QixzQkFHbEJ3Qix3QkFBeUIsQ0FBQ0MsT0FBUU4seUJBekIzQixDQUNwQm5CLGNBQWMsVUE0QkgwQixFQUFXQyJ9
